jdk动态代理*****************************************
1.创建接口
2.实现接口
3.创建代理对象,实现InvocationHandler接口

被代理类(目标对象，如Target类)，必须已有实现接口如(TargetInterf)，因为JDK提供的Proxy类将通过目标对象的类加载器ClassLoader和Interface，
以及句柄(Callback)创建与Target类拥有相同接口的代理对象proxy，该代理对象将拥有接口TargetInterf中的所有方法，同时代理类必须实现一个类似回调函
数的InvocationHandler接口并重写该接口中的invoke方法，当调用proxy的每个方法(如案例中的proxy#execute())时，invoke方法将被调用，
利用该特性，可以在invoke方法中对目标对象(被代理对象如Target)方法执行的前后动态添加其他外围业务操作，此时无需触及目标对象的任何代码，也就实现了外
围业务的操作与目标对象(被代理对象如Target)完全解耦合的目的。当然缺点也很明显需要拥有接口，这也就有了后来的CGLIB动态代理了

cglib动态代理*****************************************
不需要目标类实现接口， 实际上是通过继承的方式实现
而CGLibProxy代理类需要实现一个方法拦截器接口MethodInterceptor并重写intercept方法，类似JDK动态代理的InvocationHandler接口，也是理解为
回调函数，同理每次调用代理对象的方法时，intercept方法都会被调用，利用该方法便可以在运行时对方法执行前后进行动态增强。关于代理对象创建则通过Enhancer
类来设置的，Enhancer是一个用于产生代理对象的类，作用类似JDK的Proxy类，因为CGLib底层是通过继承实现的动态代理，因此需要传递目标对象(如A)的Class，
同时需要设置一个回调函数对调用方法进行拦截并进行相应处理，最后通过create()创建目标对象(如A)的代理对象