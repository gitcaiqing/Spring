问到Spring中Bean的生命周期，起始也就是考察一下对Spring是否熟悉，工作中很少用到其中的内容，在这里简单整理了下。
PS：可以借鉴Servlet的生命周期，实例化、初始init、接收请求service、销毁destroy;

普通的Spring Bean的生命周期

【Bean】执行bean的构造方法，创建对象

【Bean】bean属性注入

【Bean】初始化bean （spring 配置了init-method）

【Bean】使用bean：StudentBean [name=生命周期测试, age=200]

【Bean】销毁bean （spring 配置了destory-method）

实现了相关接口的Bean的生命周期
【Bean的生命周期】调用[BeanFactoryPostProcessor]接口的postProcessBeanFactory方法可通过该方法对beanFactory进行设置
【Bean的生命周期】实现[InstantiationAwareBeanPostProcessor]接口实例化bean之前调用
【Bean的生命周期】执行构造方法创建bean对象
【Bean的生命周期】实现[InstantiationAwareBeanPostProcessor]接口设置属性前调用
【Bean的生命周期】bean属性注入 
【Bean的生命周期】实现[BeanNameAware]接口 对bean设置名称:studentBean
【Bean的生命周期】实现[BeanFactoryAware]接口 得到beanFactory引用,可获取其他bean对象cq.spring4.beans.beanlife.MyBeanPostProcessor@1e58f4d4
【Bean的生命周期】调用[BeanPostProcessor]接口 ben初始化之前postProcessBeforeInitialization...StudentBean [name=生命周期测试, age=800, beanname=studentBean]...studentBean
【Bean的生命周期】bean初始化 （spring配置文件配置了init-method）
【Bean的生命周期】调用[BeanPostProcessor]接口 ben初始化之后postProcessAfterInitialization...StudentBean [name=生命周期测试, age=800, beanname=studentBean]...studentBean
【Bean的生命周期】实现[InstantiationAwareBeanPostProcessor]接口实例化bean之后调用
【Bean的生命周期】bean使用 调用bean对象：StudentBean [name=生命周期测试, age=800, beanname=studentBean]
【Bean的生命周期】bean销毁 （Spring配置中配置了destroy-method属性，会自动调用其配置的销毁方法）



Spring上下文中的Bean也类似，【Spring上下文的生命周期】

1. 实例化一个Bean，也就是我们通常说的new

2. 按照Spring上下文对实例化的Bean进行配置，也就是IOC注入

3. 如果这个Bean实现了BeanNameAware接口，会调用它实现的setBeanName(String beanId)方法，此处传递的是Spring配置文件中Bean的ID

4. 如果这个Bean实现了BeanFactoryAware接口，会调用它实现的setBeanFactory()，传递的是Spring工厂本身（可以用这个方法获取到其他Bean）

5. 如果这个Bean实现了ApplicationContextAware接口，会调用setApplicationContext(ApplicationContext)方法，传入Spring上下文，该方式同样可以实现步骤4，但比4更好，以为ApplicationContext是BeanFactory的子接口，有更多的实现方法

6. 如果这个Bean关联了BeanPostProcessor接口，将会调用postProcessBeforeInitialization(Object obj, String s)方法，BeanPostProcessor经常被用作是Bean内容的更改，并且由于这个是在Bean初始化结束时调用After方法，也可用于内存或缓存技术

7. 如果这个Bean在Spring配置文件中配置了init-method属性会自动调用其配置的初始化方法


注意：以上工作完成以后就可以用这个Bean了，那这个Bean是一个single的，所以一般情况下我们调用同一个ID的Bean会是在内容地址相同的实例

9. 当Bean不再需要时，会经过清理阶段，如果Bean实现了DisposableBean接口，会调用其实现的destroy方法

10. 最后，如果这个Bean的Spring配置中配置了destroy-method属性，会自动调用其配置的销毁方法

以上10步骤可以作为面试或者笔试的模板，另外我们这里描述的是应用Spring上下文Bean的生命周期，如果应用Spring的工厂也就是BeanFactory的话去掉第5步就Ok了

 

-------------------------------------------------------------------------------------华丽的分界线------------------------------------------------------------------------------------------

 

Spring框架中，一旦把一个Bean纳入Spring IOC容器之中，这个Bean的生命周期就会交由容器进行管理，一般担当管理角色的是BeanFactory或者ApplicationContext,认识一下Bean的生命周期活动，对更好的利用它有很大的帮助：

下面以BeanFactory为例，说明一个Bean的生命周期活动

Bean的建立， 由BeanFactory读取Bean定义文件，并生成各个实例
Setter注入，执行Bean的属性依赖注入
BeanNameAware的setBeanName(), 如果实现该接口，则执行其setBeanName方法
BeanFactoryAware的setBeanFactory()，如果实现该接口，则执行其setBeanFactory方法
BeanPostProcessor的processBeforeInitialization()，如果有关联的processor，则在Bean初始化之前都会执行这个实例的processBeforeInitialization()方法
InitializingBean的afterPropertiesSet()，如果实现了该接口，则执行其afterPropertiesSet()方法
Bean定义文件中定义init-method
BeanPostProcessors的processAfterInitialization()，如果有关联的processor，则在Bean初始化之前都会执行这个实例的processAfterInitialization()方法
DisposableBean的destroy()，在容器关闭时，如果Bean类实现了该接口，则执行它的destroy()方法
Bean定义文件中定义destroy-method，在容器关闭时，可以在Bean定义文件中使用“destory-method”定义的方法
如果使用ApplicationContext来维护一个Bean的生命周期，则基本上与上边的流程相同，只不过在执行BeanNameAware的setBeanName()后，若有Bean类实现了org.springframework.context.ApplicationContextAware接口，则执行其setApplicationContext()方法，然后再进行BeanPostProcessors的processBeforeInitialization()
实际上，ApplicationContext除了向BeanFactory那样维护容器外，还提供了更加丰富的框架功能，如Bean的消息，事件处理机制等